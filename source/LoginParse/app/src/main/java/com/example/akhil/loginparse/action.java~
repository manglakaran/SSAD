package com.example.akhil.loginparse;


import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;

import com.parse.FindCallback;
import com.parse.ParseAnonymousUtils;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;

import java.util.List;

public class action extends FragmentActivity implements ActionBar.TabListener{

    AppSectionsPagerAdapter mAppSectionsPagerAdapter;
    ViewPager mViewPager;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_action);

        mAppSectionsPagerAdapter = new AppSectionsPagerAdapter(getSupportFragmentManager());
     final ActionBar actionBar = getActionBar();
        actionBar.setHomeButtonEnabled(false);
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mAppSectionsPagerAdapter);
        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }
        });

        for (int i = 0; i < mAppSectionsPagerAdapter.getCount(); i++) {
            actionBar.addTab(
                    actionBar.newTab()
                            .setText(mAppSectionsPagerAdapter.getPageTitle(i))
                            .setTabListener(this));
        }
        actionBar.setBackgroundDrawable(new ColorDrawable(Color.parseColor("#545454")));
        actionBar.setStackedBackgroundDrawable(new ColorDrawable(Color.parseColor("#545454")));
        //actionBar.setSplitBackgroundDrawable(new ColorDrawable(Color.parseColor("#eb460f")));
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_login, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {


        if (item.getItemId() == R.id.action_logout) {
            // Log out the current user
            ParseUser.logOut();
            // Create a new anonymous user
            ParseAnonymousUtils.logIn(null);
            // Update the logged in label info
            //updateLoggedInInfo();
            // Clear the view
            //todoListAdapter.clear();
            // Unpin all the current objects
            //ParseObject
              //      .unpinAllInBackground(TodoListApplication.TODO_GROUP_NAME);
            Intent in =  new Intent(action.this,Login.class);
            //in.putExtra("user_name", );
            startActivity(in);

        }


        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    @Override
    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        // When the given tab is selected, switch to the corresponding page in the ViewPager.
        mViewPager.setCurrentItem(tab.getPosition());
    }

    @Override
    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to one of the primary
     * sections of the app.
     */
    public static class AppSectionsPagerAdapter extends FragmentPagerAdapter {

        public AppSectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int i) {
            switch (i) {
                case 0:
                    // The first section of the app is the most interesting -- it offers
                    // a launchpad into the other demonstrations in this example application.
                    return new LaunchpadSectionFragment();
                    //return new RecentTabView();
                case 1:

                    //Toast.makeText(getApplicationContext(), "", Toast.LENGTH_SHORT).show();
                    return new SelectEventFragment();
                    // return new RecentTabView();

                default:
                    // The other sections of the app are dummy placeholders.
                    Fragment fragment = new DummySectionFragment();
                    Bundle args = new Bundle();
                    args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, i + 1);
                    fragment.setArguments(args);
                    return fragment;
            }
        }

        @Override
        public int getCount() {
            return 2;
        }

        @Override
        public CharSequence getPageTitle(int position) {
		if(position == 0){            
		return "Add Event";

	}
		else{
	return "Recent";
}
        }
    }

    /**
     * A fragment that launches other parts of the demo application.
     */
    public static class LaunchpadSectionFragment extends Fragment {

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_section_launchpad, container, false);

            final Spinner sp = (Spinner) getActivity().findViewById(R.id.event_type);
            final TextView eventName = (TextView) getActivity().findViewById(R.id.eventName);
            setSpinnerContent( rootView );
            // Demonstration of a collection-browsing activity.
            rootView.findViewById(R.id.demo_collection_button)
                    .setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {

                            Intent intent = new Intent(getActivity(), inviterecord.class);
                            //Toast.makeText(getApplicationContext(), "", Toast.LENGTH_SHORT).show();
                            ParseUser currentUser = ParseUser.getCurrentUser();
                            String objID = currentUser.getObjectId().toString();
                            final ParseObject event = new ParseObject("Audios");
                            event.put("eventType", sp.getSelectedItem().toString());
                            event.put("eventName", eventName.toString());
                            event.put("userObjID", objID);
                            ParseQuery<ParseObject> query = ParseQuery.getQuery("Audios");
                            query.whereEqualTo("userObjID", objID);
                            query.findInBackground(new FindCallback<ParseObject>() {
                                @Override
                                public void done(List<ParseObject> parseObjects, ParseException e) {
                                    if(e == null){
                                        event.put("eventCounter" ,parseObjects.size());
                                    }
                                    else{
                                        e.printStackTrace();
                                    }
                                }
                            });
                            event.saveInBackground();
                            //intent.addex
                           // Intent intent = new Intent(getActivity(), inviterecord.class);
                            //Toast.makeText(getAppli = cationContext(), "", Toast.LENGTH_SHORT).show();
                            /*Bundle A = new Bundle();
                            Spinner k = (Spinner) getActivity().findViewById(R.id.event_type);
                            EditText b = (EditText)getActivity().findViewById(R.id.eventName);
                            A.putString("EventName",b.getText().toString());
                            A.putString("EventType",k.getSelectedItem().toString());
                            intent.putExtras(A);*/
                            startActivity(intent);
                            //startActivity(intent);
                        }
                    });

            // Demonstration of navigating to external activities.
            /*rootView.findViewById(R.id.demo_external_activity)
                    .setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            // Create an intent that asks the user to pick a photo, but using
                            // FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, ensures that relaunching
                            // the application from the device home screen does not return
                            // to the external activity.
                            Intent externalActivityIntent = new Intent(Intent.ACTION_PICK);
                            externalActivityIntent.setType("image/*");
                            externalActivityIntent.addFlags(
                                    Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                            startActivity(externalActivityIntent);
                        }
                    });*/

            return rootView;
        }
        private void setSpinnerContent( View view )
        {
            Spinner spinner = (Spinner) view.findViewById( R.id.event_type );
            ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource( getActivity(), R.array.event_types , android.R.layout.simple_spinner_item);
            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
            spinner.setAdapter( adapter );
        }

    }


    /**
     * A dummy fragment representing a section of the app, but that simply displays dummy text.
     */
    public static class DummySectionFragment extends Fragment {

        public static final String ARG_SECTION_NUMBER = "section_number";

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_section_dummy, container, false);
            Bundle args = getArguments();
            ParseUser currentUser = ParseUser.getCurrentUser();
            String welcomeMessage;
            welcomeMessage = "Hello  " + currentUser.getUsername() + ", swipe thru the app ";
            ((TextView) rootView.findViewById(android.R.id.text1)).setText(
                    welcomeMessage);
            return rootView;
        }
    }


}
